name: CD-build-and-release

on:
  pull_request:
    branches:
      - main
      - master
    types:
      - closed

permissions:
  contents: write  # Grants permission to create the release on github repo

jobs:
  build-and-release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    name: Build and Publish Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # Standard way using setup.py
      # - name: Install dependencies
      #   run: |
      #     python -m venv venv
      #     source venv/bin/activate
      #     pip install --upgrade pip
      #     pip install -r requirements.txt
      #     pip install wheel setuptools

      # - name: Build pkg wheel
      #   run: |
      #     source venv/bin/activate
      #     python -m setup.py sdist bdist_wheel

      # Using Poetry
      - name: Install Poetry
        run: |
          pip install poetry

      - name: Install dependencies
        run: |
          poetry install --only main  # Install only production dependencies

      - name: Build wheel
        run: |
          poetry build

      - name: Extract package version
        id: get_version
        run: echo "VERSION=$(poetry version -s)" >> $GITHUB_ENV
      
      - name: Check if tag exists
        id: check_tag
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/v${{ env.VERSION }}"; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Get latest commit message
        run: echo "LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=%B | tr '\n' ' ')" >> $GITHUB_ENV  
  
      - name: Create GitHub Release
        id: create_release
        if: env.TAG_EXISTS == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: ${{ env.LATEST_COMMIT_MESSAGE }}
          body_path: latest_release_note.md
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
